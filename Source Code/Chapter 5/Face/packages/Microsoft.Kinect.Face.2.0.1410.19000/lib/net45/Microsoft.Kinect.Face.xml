<?xml version="1.0"?>
<doc>
    <assembly>
        "Microsoft.Kinect.Face.Managed"
    </assembly>
    <members>
        <member name="P:Microsoft.Kinect.Face.FaceFrame.IsTrackingIdValid">
            <summary>
Gets validity status of the trackingId for this frame.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceFrame.TrackingId">
            <summary>
Gets the TrackingId for this frame.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceFrame.FaceFrameResult">
            <summary>
Gets the data payload of this frame.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceFrame.FaceFrameSource">
            <summary>
Gets the source for this frame type.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceFrame.InfraredFrameReference">
            <summary>
Gets the infrared frame reference for this frame.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceFrame.DepthFrameReference">
            <summary>
Gets the depth frame reference for this frame.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceFrame.ColorFrameReference">
            <summary>
Gets the color frame reference for this frame.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceFrame.BodyFrameReference">
            <summary>
Gets the body frame reference for this frame.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceFrame.RelativeTime">
            <summary>
Gets the unique relative time at which the frame was captured.
</summary>
        </member>
        <member name="M:Microsoft.Kinect.Face.RectI.op_Inequality(Microsoft.Kinect.Face.RectI,Microsoft.Kinect.Face.RectI)">
            <summary>
Indicates whether the values of two specified RectI objects are not equal.
</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>true if the two specified RectI objects are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Face.RectI.op_Equality(Microsoft.Kinect.Face.RectI,Microsoft.Kinect.Face.RectI)">
            <summary>
Indicates whether the values of two specified RectI objects are equal.
</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>true if the two specified RectI objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Face.RectI.Equals(Microsoft.Kinect.Face.RectI)">
            <summary>
Returns a value indicating whether this instance and a specified RectI object represent the same value.
</summary>
            <param name="rect">An object to compare to this instance.</param>
            <returns>true if rect is equal to this instance; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.Kinect.Face.RectI.Equals(System.Object)">
            <summary>
Returns a value that indicates whether this instance of is equal to a specified object.
</summary>
            <param name="object">An object to compare with this instance. </param>
            <returns>true if object is equal to this instance; otherwise, false</returns>
        </member>
        <member name="F:Microsoft.Kinect.Face.RectI.Bottom">
            <summary>
The Y coordinate of the bottom side of the rect.
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.RectI.Right">
            <summary>
The X coordinate of the right side of the rect.
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.RectI.Top">
            <summary>
The Y coordinate of the top side of the rect.
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.RectI.Left">
            <summary>
The X coordinate of the left side of the rect.
</summary>
        </member>
        <member name="T:Microsoft.Kinect.Face.RectI">
            <summary>
Represents a 2D rectangle with integer accuracy.
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.FaceEngagement">
            <summary>
Enable detection of whether or not the user is engaged with the content they are viewing
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.Glasses">
            <summary>
Enable detection of whether or not the user is wearing glasses
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.LookingAway">
            <summary>
Enable detection of whether or not the user is looking at the sensor
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.MouthMoved">
            <summary>
Enable detection of whether or not the user's mouth has moved since the previous frame
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.MouthOpen">
            <summary>
Enable detection of whether or not the user's mouth is open
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.LeftEyeClosed">
            <summary>
Enable detection of whether or not the user's left eye is closed
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.RightEyeClosed">
            <summary>
Enable detection of whether or not the user's right eye is closed
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.Happy">
            <summary>
Enable deteciotn of the user's happy facial expression
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.RotationOrientation">
            <summary>
The face rotation and orientation will be computed
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.PointsInColorSpace">
            <summary>
The face alignment points will be computed in color space
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.BoundingBoxInColorSpace">
            <summary>
The bounding box will be computed in color space
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.PointsInInfraredSpace">
            <summary>
The face alignment points will be computed in infrared space
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.BoundingBoxInInfraredSpace">
            <summary>
The bounding box will be computed in infrared space
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceFrameFeatures.None">
            <summary>
No face frame features will be computed
</summary>
        </member>
        <member name="M:Microsoft.Kinect.Face.FaceFrameReference.AcquireFrame">
            <summary>
Acquires the frame held by this reference.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceFrameReference.RelativeTime">
            <summary>
Gets the unique relative time at which the frame was captured.
</summary>
        </member>
        <member name="M:Microsoft.Kinect.Face.HighDefinitionFaceFrame.GetAndRefreshFaceAlignmentResult(Microsoft.Kinect.Face.FaceAlignment)">
            <summary>
Refreshes and gets the face alignment results.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrame.FaceAlignmentQuality">
            <summary>
Gets the face alignment quality.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrame.FaceModel">
            <summary>
Gets the face model.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrame.TrackingId">
            <summary>
The ID of the requested body for this frame.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrame.IsFaceTracked">
            <summary>
True if face alignment succeeded.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrame.IsTrackingIdValid">
            <summary>
True if the requested body was tracked.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrame.InfraredFrameReference">
            <summary>
Gets the source for this frame type.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrame.DepthFrameReference">
            <summary>
Gets the depth frame reference.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrame.ColorFrameReference">
            <summary>
Gets the color frame reference.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrame.BodyFrameReference">
            <summary>
Gets the body frame reference.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrame.HighDefinitionFaceFrameSource">
            <summary>
Gets the high definition face frame source.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrame.RelativeTime">
            <summary>
Gets the unique relative time at which the frame was captured.
</summary>
        </member>
        <member name="M:Microsoft.Kinect.Face.FaceModel.CalculateVerticesForAlignment(Microsoft.Kinect.Face.FaceAlignment)">
            <summary>
Calculates vertices for alignment.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceModel.FaceShapeDeformations">
            <summary>
Gets a collection of face shape deformations.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceModel.HairColor">
            <summary>
Gets the hair color.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceModel.SkinColor">
            <summary>
Gets the skin color.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceModel.Scale">
            <summary>
Gets the scaling factor.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceModel.TriangleIndices">
            <summary>
Gets a collection of triangle indices.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceModel.TriangleCount">
            <summary>
Gets the number of triangles.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceModel.VertexCount">
            <summary>
Gets the number of vertices.
</summary>
        </member>
        <member name="F:Microsoft.Kinect.PropertyChangedAdapter._handler">
            <summary>
The wrapped handler.
</summary>
        </member>
        <member name="M:Microsoft.Kinect.PropertyChangedAdapter.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
Called to trigger the property changed event handler. 
</summary>
        </member>
        <member name="M:Microsoft.Kinect.PropertyChangedAdapter.#ctor(System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
Initializes a new instance of the PropertyChangedAdapter class with the given handler. 
</summary>
            <param name="handler">PropertyChangedEventHandler to wrap.</param>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceAlignment.Quality">
            <summary>
Gets the resulting quality of the face alignment.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceAlignment.AnimationUnits">
            <summary>
Gets a collection of animation units.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceAlignment.HeadPivotPoint">
            <summary>
Gets the pivot point of the head.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.FaceAlignment.FaceOrientation">
            <summary>
Gets the face orientation.
</summary>
        </member>
        <member name="M:Microsoft.Kinect.Face.HighDefinitionFaceFrameReference.AcquireFrame">
            <summary>
Acquires the frame held by this reference.
</summary>
        </member>
        <member name="P:Microsoft.Kinect.Face.HighDefinitionFaceFrameReference.RelativeTime">
            <summary>
Gets the unique relative time at which the frame was captured.
</summary>
        </member>
        <member name="T:Microsoft.Kinect.Face.FaceAlignmentQuality">
            <summary>
Face alignment quality levels.
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceAlignmentQuality.Low">
            <summary>
Lower quality and lower CPU usage.
</summary>
        </member>
        <member name="F:Microsoft.Kinect.Face.FaceAlignmentQuality.High">
            <summary>
Higher quality and higher CPU usage.
</summary>
        </member>
        <member name="M:ThreadSafeList`1.GetEnumeratorOld">
            <summary>
Returns an enumerator that iterates through the ThreadSafeList&lt;T&gt;.
</summary>
            <remarks>This enumerator is a SNAPSHOT of the list.  Keep this in mind when using this enumerator.</remarks>
            <returns>A ThreadSafeList&lt;T&gt;.Enumerator for the ThreadSafeList&lt;T&gt;.</returns>
        </member>
        <member name="M:ThreadSafeList`1.GetEnumerator">
            <summary>
Returns an enumerator that iterates through the ThreadSafeList&lt;T&gt;.
</summary>
            <remarks>This enumerator is a SNAPSHOT of the list.  Keep this in mind when using this enumerator.</remarks>
            <returns>A ThreadSafeList&lt;T&gt;.Enumerator for the ThreadSafeList&lt;T&gt;.</returns>
        </member>
        <member name="M:ThreadSafeList`1.NewEnumerator">
            <summary>
Returns an enumerator that iterates through the ThreadSafeList&lt;T&gt;.
</summary>
            <remarks>This support function exists to satisfy code quality warning CA2000.  Otherwise, it would be in-line.</remarks>
            <returns>A ThreadSafeList&lt;T&gt;.Enumerator for the ThreadSafeList&lt;T&gt;.</returns>
        </member>
        <member name="F:ThreadSafeList`1._list">
            <summary>
Wrapped list object.
</summary>
        </member>
        <member name="F:ThreadSafeList`1._lock">
            <summary>
Lock object to use for all operations.
</summary>
        </member>
        <member name="M:ThreadSafeList`1.Remove(`0)">
            <summary>
Removes the first occurrence of a specific object from the ThreadSafeList&lt;T&gt;.
</summary>
            <param name="item">
The object to remove from the ThreadSafeList&lt;T&gt;. The value
can be null for reference types.
</param>
            <returns>
true if item is successfully removed; otherwise, false. This method also
returns false if item was not found in the ThreadSafeList&lt;T&gt;.
</returns>
        </member>
        <member name="P:ThreadSafeList`1.IsReadOnly">
            <summary>
Gets a value indicating whether the list is read only.  Returns true.
</summary>
        </member>
        <member name="P:ThreadSafeList`1.Count">
            <summary>
Gets the number of elements actually contained in the ThreadSafeList&lt;T&gt;.
</summary>
        </member>
        <member name="M:ThreadSafeList`1.CopyTo(`0[])">
            <summary>
Copies the entire ThreadSafeList&lt;Tgt; to a compatible one-dimensional
array, starting at the beginning of the target array.
</summary>
            <param name="arr">
The one-dimensional System.Array that is the destination of the elements
copied from System.Collections.Generic.List&lt;Tgt;. The System.Array must have
zero-based indexing.
</param>
            <exception cref="T:System.ArgumentNullException">Array is null.</exception>
            <exception cref="T:System.ArgumentException">
The number of elements in the source ThreadSafeList&lt;Tgt; is
greater than the number of elements that the destination array can contain.
</exception>
        </member>
        <member name="M:ThreadSafeList`1.CopyTo(`0[],System.Int32)">
            <summary>
Copies the entire ThreadSafeList&lt;T&gt; to a compatible one-dimensional
array, starting at the beginning of the target array.
</summary>
            <param name="arr">
The one-dimensional System.Array that is the destination of the elements
copied from ThreadSafeList&lt;T&gt;. The System.Array must have
zero-based indexing.
</param>
            <param name="arrayIndex">
The zero-based index in array at which copying begins.
</param>
            <exception cref="T:System.ArgumentNullException">Array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">ArrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
The number of elements in the source ThreadSafeList&lt;T&gt; is
greater than the available space from arrayIndex to the end of the destination
array.
</exception>
        </member>
        <member name="M:ThreadSafeList`1.Contains(`0)">
            <summary>
Determines whether an element is in the ThreadSafeList&lt;T&gt;.
</summary>
            <param name="item">
The object to locate in the ThreadSafeList&lt;T&gt;. The value
can be null for reference types.
</param>
            <returns>
true if item is found in the ThreadSafeList&lt;T&gt;; otherwise,
false.
</returns>
        </member>
        <member name="M:ThreadSafeList`1.Clear">
            <summary>
Removes all elements from the ThreadSafeList&lt;T&gt;.
</summary>
        </member>
        <member name="M:ThreadSafeList`1.Add(`0)">
            <summary>
Adds an object to the end of the ThreadSafeList&lt;T&gt;.
</summary>
            <param name="item">
The object to be added to the end of the ThreadSafeList&lt;T&gt;.
The value can be null for reference types.
</param>
        </member>
        <member name="P:ThreadSafeList`1.default(System.Int32)">
            <summary>
Gets or sets the element at the specified index.
</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:ThreadSafeList`1.RemoveAt(System.Int32)">
            <summary>
Removes the element at the specified index of the ThreadSafeList&lt;T&gt;.
</summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0.-or-index is equal to or greater than ThreadSafeList&lt;T&gt;.Count.</exception>
        </member>
        <member name="M:ThreadSafeList`1.Insert(System.Int32,`0)">
            <summary>
Inserts an element into the ThreadSafeList&lt;T&gt; at the specified
index.
</summary>
            <param name="index">
The zero-based index at which item should be inserted.
</param>
            <param name="item">
The object to insert. The value can be null for reference types.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0.-or-index is greater than ThreadSafeList&lt;T&gt;.Count.</exception>
        </member>
        <member name="M:ThreadSafeList`1.IndexOf(`0)">
            <summary>
Searches for the specified object and returns the zero-based index of the
first occurrence within the entire ThreadSafeList&lt;T&gt;.
</summary>
            <param name="item">
The object to locate in the ThreadSafeList&lt;T&gt;. The value
can be null for reference types.
</param>
            <returns>
The zero-based index of the first occurrence of item within the entire ThreadSafeList&lt;T&gt;,
if found; otherwise, –1.
</returns>
        </member>
        <member name="M:ThreadSafeList`1.AddRange(System.Collections.Generic.IEnumerable`1{`0})">
            <summary>
Adds the elements of the specified collection to the end of the ThreadSafeList&lt;T&gt;.
</summary>
            <param name="collection">
The collection whose elements should be added to the end of the ThreadSafeList&lt;T&gt;.
The collection itself cannot be null, but it can contain elements that are
null, if type T is a reference type.
</param>
            <exception cref="T:System.ArgumentNullException">Collection is null.</exception>
        </member>
        <member name="M:ThreadSafeList`1.#ctor(System.Object)">
            <summary>
Initializes a new instance of the ThreadSafeList class with an existing new lock.
</summary>
            <param name="critSec">Existing lock to use for this list.</param>
        </member>
        <member name="M:ThreadSafeList`1.#ctor">
            <summary>
Initializes a new instance of the ThreadSafeList class with a new lock.
</summary>
        </member>
        <member name="P:ThreadSafeList`1.ThreadSafeEnumerator.Current2">
            <summary>
Gets the element in the collection at the current position of the enumerator.
</summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:ThreadSafeList`1.ThreadSafeEnumerator.Current">
            <summary>
Gets the element in the collection at the current position of the enumerator.
</summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="M:ThreadSafeList`1.ThreadSafeEnumerator.Reset">
            <summary>
Sets the enumerator to its initial position, which is before the first element
in the collection.
</summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:ThreadSafeList`1.ThreadSafeEnumerator.MoveNext">
            <summary>
Advances the enumerator to the next element of the collection.
</summary>
            <returns>
true if the enumerator was successfully advanced to the next element; false
if the enumerator has passed the end of the collection.
</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:ThreadSafeList`1.ThreadSafeEnumerator.Dispose">
            <summary>
Disposes the underlying enumerator.  Does not set _list or _enum to null so calls will still
proxy to the disposed instance (and throw the proper exception).
</summary>
        </member>
        <member name="M:ThreadSafeList`1.ThreadSafeEnumerator.#ctor(ThreadSafeList`1{`0})">
            <summary>
Initializes a new instance of the ThreadSafeEnumerator class, creating a snapshot of the given list.
</summary>
            <param name="list">List to snapshot.</param>
        </member>
        <member name="F:ThreadSafeList`1.ThreadSafeEnumerator._enum">
            <summary>
Internal enumerator of the snapshot.
</summary>
        </member>
        <member name="F:ThreadSafeList`1.ThreadSafeEnumerator._list">
            <summary>
Snapshot to enumerate.
</summary>
        </member>
        <member name="T:ThreadSafeList`1.ThreadSafeEnumerator">
            <summary>
Provides a SNAPSHOT enumerator of the list.  Keep this in mind when using this enumerator.
</summary>
        </member>
        <member name="T:ThreadSafeList`1">
            <summary>
IList implementation with locking on all operations.
</summary>
            <typeparam name="T">Type of generic IList to implement.</typeparam>
        </member>
        <member name="T:NativeReaderWriterLock">
            <summary>
A managed wrapper for the native slim reader writer lock which requires no cleanup, and
therefore need not be disposable.
</summary>
        </member>
        <member name="T:Lock">
            <copyright file="ThreadSafeList.h" company="Microsoft Corporation">
   Copyright (c) Microsoft Corporation. All rights reserved.
</copyright>
            <summary>
   A list with locking semantics so it can be used cross-thread.
</summary>
            <copyright file="Lock.h" company="Microsoft Corporation">
    Copyright (c) Microsoft Corporation. All rights reserved.
</copyright>
            <summary>
   Classes to imitate the lock keyword available in C#.
</summary>
        </member>
    </members>
</doc>